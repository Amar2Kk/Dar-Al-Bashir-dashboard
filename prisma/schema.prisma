// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboard  Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  types      Type[]      @relation("StoreToType")
  products   Product[]   @relation("StoreToProduct")
  order      Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  Categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Type {
  id       String    @id @default(uuid())
  storeId  String
  store    Store     @relation("StoreToType", fields: [storeId], references: [id])
  products Product[]

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id      String @id @default(uuid())
  storeId String

  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  name       String
  price      Decimal
  inStock    Int
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  typeId String
  type   Type   @relation(fields: [typeId], references: [id])

  images Image[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([typeId])
}

model Image {
  id        String  @id @default(uuid())
  productId String
  prodcut   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  isDelivered Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id      String @id @default(uuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product Product @relation(fields: [productId],references: [id])

  @@index([orderId])
  @@index([productId])
}
